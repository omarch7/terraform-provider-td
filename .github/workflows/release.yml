name: Build and Release
on:
  pull_request:
    types: [closed]
    branches:
      - master
jobs:
  create-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Determine version
        id: version
        run: |
          # Get PR branch name
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          echo "Branch name: $BRANCH_NAME"
          # Fetch latest tag
          git fetch --tags --force
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          LATEST_TAG=${LATEST_TAG:-v0.0.0}
          echo "Latest tag: $LATEST_TAG"
          # Parse latest tag - remove 'v' prefix for calculations
          LATEST_VERSION=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< $"$LATEST_VERSION"
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}
          echo "Current version: $MAJOR.$MINOR.$PATCH"
          if [[ "$BRANCH_NAME" == major/* || $BRANCH_NAME == feature/* ]]; then
            echo "Bumping major version"
            NEW_MAJOR=$((MAJOR+1))
            NEW_MINOR=0
            NEW_PATCH=0
          elif [[ "$BRANCH_NAME" == minor/* ]]; then
            echo "Bumping minor version"
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$((MINOR+1))
            NEW_PATCH=0
          else
            echo "Bumping patch version"
            NEW_MAJOR=$MAJOR
            NEW_MINOR=$MINOR
            NEW_PATCH=$((PATCH+1))
          fi
          NEW_TAG="v$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "New version tag: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
      - name: Create and push tag
        run: |
          NEW_TAG="${{ steps.version.outputs.new_tag }}"
          git tag $NEW_TAG
          git push origin $NEW_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GA_TOKEN }}
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24
          cache: true
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GA_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

